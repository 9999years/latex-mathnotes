\NeedsTeXFormat{LaTeX2e}
\RequirePackage{expl3}
\ProvidesExplPackage{mathnotes}{2019/10/17}{0.0.1}{Styles for mathematical
  note taking.}
\errorcontextlines 20
% Module 'mn'

% Load some utility packages.
\RequirePackage{xparse}  % Better command declarations.
% \RequirePackage{etoolbox}  % Robust command declarations.
\RequirePackage{xkeyval}  % Better keyval parsing.
\RequirePackage{kvoptions}  % More flexible package options.
\RequirePackage{./mathnotes-util}

\SetupKeyvalOptions
  {
    family = mathnotes ,
  }

\mn__option_new[init = true]{fonts}
\mn__option_new[init = true]{stix}
\mn__option_new[init = true]{symbols}
\mn__option_new{listings}
\mn__option_new{knowledge}
\mn__option_new{index}
\mn__option_new{footnotes}
\mn__option_new{figures}
\mn__option_new{tabu}

\mn__process_options:n { mathnotes }

% Load fonts.
% Check if we can load fontspec; this is taken from fontspec.sty.
\bool_new:N  \c__mn_fontspec_bool
\bool_set:Nn \c__mn_fontspec_bool
  {
    \sys_if_engine_xetex_p: || \sys_if_engine_luatex_p:
  }

% NOTE: The order these packages are loaded in is very important.
% - mathtools has to be loaded before these or overbrackets and such get
%   messed up
% - unicode-math overwrites a bunch of commands, so should be loaded after
%   amsmath and others
% - amsmath should be loaded after stix2 (not sure why, but the stix2
%   documentation specifies this) -- however, if we can use fontspec, we
%   just load the stix2 fonts without the stix2 package itself, so we load
%   amsmath before unicode-math (and the stix2 fonts)
\RequirePackage{mathtools}
\bool_if:NTF \g__mn_fonts_bool
  {
    \bool_if:NTF \c__mn_fontspec_bool
      {
        \RequirePackage{amsmath}[2013/01/14]
        % unicode-math makes equations copy/pastable in PDF output.
        % Note that unicode-math encapsulates the functionality of fontspec.
        \RequirePackage[
          warnings-off={mathtools-colon,mathtools-overbracket}
        ]{unicode-math}
        \bool_if:NT \g__mn_stix_bool
          {
            \setmainfont
              [
                Extension      = .otf ,
                UprightFont    = *-Regular ,
                BoldFont       = *-Bold ,
                ItalicFont     = *-Italic ,
                BoldItalicFont = *-BoldItalic ,
              ]
              { STIX2Text }

            \setmathfont
              [
                Extension    = .otf ,
                StylisticSet =
                  {
                    1 , % better caligraphic forms
                    8 , % upright integrals
                  } ,
              ]
              { STIX2Math }
          }
      }
      {
        % Otherwise, load non-XeTeX fallbacks.
        \RequirePackage[upint]{stix2}
        \RequirePackage{amsmath}[2013/01/14]
      }
  }
  {
    % No fonts
    \RequirePackage{amsmath}[2013/01/14]
  }

\bool_if:NT \g__mn_symbols_bool
  {
    % Logical not
    \mn__if_package_loaded:nTF { unicode-math }
      { \DeclareDocumentCommand \lnot {} { \char "AC } } % 0xAC = Â¬
      { \mathchardef \Not = "1218 }

    % Blackboard bold set symbols
    \NewDocumentCommand \Rational {}{\mathbb{Q}}
    \ProvideDocumentCommand \Rat {}{\Rational}
    \ProvideDocumentCommand \Q {}{\Rational}

    % \NewDocumentCommand \Irrational {}{\mathbb{I}}
    % \ProvideDocumentCommand \Irrat {}{\Irrational}
    % \ProvideDocumentCommand \I {}{\Irrational}

    \NewDocumentCommand \Natural {}{\mathbb{N}}
    \ProvideDocumentCommand \Nat {}{\Natural}
    \ProvideDocumentCommand \N {}{\Natural}

    \NewDocumentCommand \Integer {}{\mathbb{Z}}
    \ProvideDocumentCommand \Int {}{\Integer}
    \ProvideDocumentCommand \Z {}{\Integer}

    \NewDocumentCommand \Complex {}{\mathbb{C}}
    \ProvideDocumentCommand \Comp {}{\Complex}
    \ProvideDocumentCommand \C {}{\Complex}

    \NewDocumentCommand \Real {}{\mathbb{R}}
    % It's a bit unclear to me why this is necessary, but it is; probably
    % something to do with amssymb?
    \AtBeginDocument{\RenewDocumentCommand \Re {}{\Real}}
    \ProvideDocumentCommand \R {}{\Real}

    % Using the Weierstrass p here is probably a bit controversial, but I like
    % it. I'm open to change, though...
    \ProvideDocumentCommand \powerset {}{\wp}

    \RenewDocumentCommand \vec {m}{\mathbf{#1}}

    % Operator synonyms.
    % Set intersect.
    \ProvideDocumentCommand \intersection {}{\cap}
    \ProvideDocumentCommand \inter {}{\cap}
    \ProvideDocumentCommand \bigintersection {}{\bigcap}
    \ProvideDocumentCommand \biginter {}{\bigcap}

    % Set union.
    \ProvideDocumentCommand \union {}{\cup}
    \ProvideDocumentCommand \bigunion {}{\bigcup}
    % Disjoint union.
    \ProvideDocumentCommand \disjointunion {}{\sqcup}
    \ProvideDocumentCommand \disunion {}{\sqcup}

    % Divisiblity.
    \ProvideDocumentCommand \divisible {}{\mid}
    \ProvideDocumentCommand \div {}{\mid}
    % Negation.
    \ProvideDocumentCommand \notdivisible {}{\nmid}
    \ProvideDocumentCommand \ndivisible {}{\nmid}
    \ProvideDocumentCommand \notdiv {}{\nmid}
    \ProvideDocumentCommand \ndiv {}{\nmid}

    % Wrappers around floor and ceil.
    \ProvideDocumentCommand \floor {m}{\lfloor #1\rfloor}
    \ProvideDocumentCommand \ceil {m}{\lceil #1\rceil}

    % The default empty set symbol is very ugly. Use \varnothing instead,
    % which is less ugly.
    \AtBeginDocument{\RenewDocumentCommand \emptyset {}{\varnothing}}
    \ProvideDocumentCommand \es {}{\emptyset}

    % Function composition. The notation g \after f helps internalize the
    % order of operations. :)
    \ProvideDocumentCommand \after {}{\circ}

    % Cross product.
    \ProvideDocumentCommand \cross {}{\times}

    % Operators.
    % Function image.
    \cs_if_free:NT \img
      { \DeclareMathOperator \img {img} }
    % Function pre-image.
    \cs_if_free:NT \pre
      { \DeclareMathOperator \pre {pre} }
    % Function stabilizer.
    \cs_if_free:NT \Stab
      { \DeclareMathOperator \Stab {Stab} }
    % Set of a function's fixed points.
    \cs_if_free:NT \FixPt
      { \DeclareMathOperator \FixPt {FixPt} }

    % Injective function.
    \ProvideDocumentCommand \injective {}{\hookrightarrow}
    \ProvideDocumentCommand \inj {}{\hookrightarrow}
    % Surjective function.
    \ProvideDocumentCommand \surjective {}{\twoheadrightarrow}
    \ProvideDocumentCommand \surj {}{\twoheadrightarrow}
    % Function restriction.
    \ProvideDocumentCommand \restr {}{\restriction}

    \DeclareDocumentCommand \qedmark {}{\ensuremath{\square}}
  }

% Gives this an equation in an amsmath starred environment.
\ProvideDocumentCommand \numberthis {}
  {
    \tag { \theequation }
    \refstepcounter { equation }
  }

% Gives this equation a number and label in an amsmath starred environment.
\ProvideDocumentCommand \labelthis { m }
  {
    \numberthis
    \IfValueT { #1 }
      {
        \label { #1 }
      }
  }

\RequirePackage{enumitem}

\bool_if:NT \g__mn_listings_bool
  { \RequirePackage{listings} }

% If listings is loaded, make them colorful:
\mn__if_package_loaded:nT { listings }
  {
    \RequirePackage{xcolor}
    \lstset
      {
        % Use a monospace font for code listings.
        basicstyle        = \ttfamily ,
        language          = Mathematica ,
        % Tab size of 4, but you should probably use spaces.
        tabsize           = 4 ,
        % Keywords in blue.
        keywordstyle      = \bf\ttfamily\color[rgb]{0,.3,.7} ,
        % Comments in green.
        commentstyle      = \color[rgb]{0.133,0.545,0.133} ,
        % Strings in orange.
        stringstyle       = \color[rgb]{0.75,0.49,0.07} ,
        % The default listings characters are too widely-spaced.
        % 0.55em/character makes things look a lot better.
        basewidth         = 0.55em ,
        % Wrap lines if they're too long, and wrap at whitespace.
        breaklines ,
        breakatwhitespace = true ,
      }
  }

% The \emailstyle command gives the style of an email; by default, we
% initialize it to \texttt.
\ProvideDocumentCommand \emailstyle { m } { \texttt{#1} }
% The \email command typesets an email; if the user has loaded the
% hyperref package, we can add a link as well.
\mn__if_package_loaded:nTF { hyperref }
  {
    \ProvideDocumentCommand \email { m }
          { \href{mailto:#1}{\emailstyle{#1}} }
  }
  {
    \ProvideDocumentCommand \email { m }
          { \emailstyle{#1} }
  }

% Creates an acronym-command.
% \newacronym[<\command>]{<text>} defines \command to be \textsc{text}.
% \newacronym{<text>} defines \text to be \textsc{text}.
\ProvideDocumentCommand \newacronym { o m }
  {
    \group_begin:
      % If we have #1, then #1 is the cs we're going to define; #1 is a cs.
      % Otherwise, we define \#2.
      \cs_set:Npx \mn__acronym_cs: {}
        {
          \IfValueTF { #1 }
            % Use optional arg for cs.
            { \exp_not:N #1 }
            % Otherwise, use the acronym text.
            { \exp_not:c { #2 } }
        }

      % Ensure that the cs is undefined.
      \cs_if_exist:cT \mn__acronym_cs:
        {
          \PackageError { mathnotes }
            {
              Refusing~to~redefine~\mn__acronym_cs:~as~an~
              acronym
            }
            {
              Pick~a~different~destination~control~sequence~with~
              \protect\newacronym's~optional~argument?
            }
        }

      % Finally, define the acronym command.
      \cs_new:cpn \l__mn_acronym_cs_str {}
        { \textsc { #2 } }
    \group_end:
  }

% \newacronyms takes a comma-separated list as its argument and defines them
% all as acronyms.
\ProvideDocumentCommand \newacronyms { >{\SplitList{,}} m }
  {
    \ProcessList { #1 } { \newacronym }
  }

% Package configuration string values.
\cs_set:Npn \mn__key_new:n #1
  {
    \keys_define:nn { mathnotes }
      {
        #1 .value_required:n = true ,
        #1 .tl_gset:c = g__mn_#1_tl ,
        #1 .initial:x = \tl_use:N \c_novalue_tl ,
      }
  }

\cs_set:Npn \mn__keys_new:n #1 { \clist_map_function:nN { #1 } \mn__key_new:n }

\mn__keys_new:n
  {
    instructor, course, name, email, institution, semester,
  }

\NewDocumentCommand \mathnotes { m }
  {
    \keys_set:nn { mathnotes } { #1 }
  }

\bool_new:N \g__mn_author_set
\cs_set:Npn \author #1
  {
    \bool_gset_false:N \g__mn_author_set
    \cs_gset:Npn \@author { #1 }
  }

\prg_new_conditional:Npnn \mn__if_should_make_thanks:
  { T, }
  {
    \mn__any_tl_has_value:nTF
      {
        \g__mn_email_tl ,
        \g__mn_course_tl ,
        \g__mn_instructor_tl ,
        \g__mn_institution_tl ,
        \g__mn_semester_tl ,
      }
      { \prg_return_true: }
      { \prg_return_false: }
  }

\cs_set:Npn \mn__make_thanks_text
  {
    \tl_if_eq:NNF \g__mn_email_tl \c_novalue_tl
      { \email { \tl_use:N { \g__mn_email_tl } } ; }
    \tl_if_eq:NNF \g__mn_course_tl \c_novalue_tl
      {
        \typeout{course~has~value.}
        \tl_use:N \g__mn_course_tl
      }
    \tl_if_eq:NNF \g__mn_instructor_tl \c_novalue_tl
      {
        \typeout{instructor~has~value.}
        \mn__any_tl_has_value:nTF
          {
            \g__mn_email_tl ,
            \g__mn_course_tl ,
          }
          { taught~by~ }
          { Taught~by~ }
        \tl_use:N \g__mn_instructor_tl
      }
    \tl_if_eq:NNF \g__mn_institution_tl \c_novalue_tl
      {
        \typeout{institution~has~value.}
        \mn__any_tl_has_value:nTF
          {
            \g__mn_email_tl ,
            \g__mn_course_tl ,
            \g__mn_instructor_tl ,
          }
          { at~ }
          { At~ }
        \tl_use:N \g__mn_institution_tl
      }
    \tl_if_eq:NNF \g__mn_semester_tl \c_novalue_tl
      {
        \typeout{semester~has~value.}
        \mn__any_tl_has_value:nT
          {
            \g__mn_email_tl ,
            \g__mn_course_tl ,
            \g__mn_instructor_tl ,
            \g__mn_institution_tl ,
          }
          { ,~ }
        \tl_use:N \g__mn_semester_tl
      }
    .
  }

\cs_set:Npn \@author
  {
  % If the author hasn't been set, we provide this (complicated, PITA)
  % default; however, if we don't have any information to put in it, we
  % still give a warning.
  \tl_if_eq:NNTF \g__mn_name_tl \c_novalue_tl
    {
      % TODO: Use a real error...
      \typeout { Warning:~No~name~given }
    }
    {
      \tl_use:N \g__mn_name_tl
      % Do we have any information to put in a \thanks?
      \mn__if_should_make_thanks:T
        {
          \thanks { \mn__make_thanks_text }
        }
    }
  }

% \usepackage{mdframed}

% \mdtheorem{thm}{Theorem}
% \newtheorem{shortthm}[thm]{Theorem}
% \newtheorem{lem}{Lemma}
% \newtheorem{cor}{Corollary}

% \theoremstyle{definition}
% \newtheorem{defn}{Definition}
% \newtheorem{notation}{Notation}
% \newtheorem{prop}{Proposition}

% \theoremstyle{remark}
% \newtheorem{remark}{Remark}
% \newtheorem{ex}{Example}

% % reset for future defn.s
% \theoremstyle{plain}

\NewDocumentCommand \TODO  {s o}
	{\IfBooleanTF{#1}
		{\def\TODO@fb{\framebox[\linewidth]}}
		{\def\TODO@fb{\framebox}}
	\expandafter
	\TODO@fb{
		\textbf{TODO\IfValueT{#2}{:}}
		\IfValueT{#2}{ #2}}}

\bool_if:NT \g__mn_index_bool
  {
    \bool_set_true:N \g__mn_knowledge_bool
  }

\bool_if:NT \g__mn_knowledge_bool
  {
    \RequirePackage[quotation, xcolor, notion, makeidx]{knowledge}
    \knowledgeconfigure{visible anchor points=false}
    \knowledgestyle*{intro unknown}
      {
        boldface,
        underline=false,
        color=red,
      }
    \knowledgestyle*{kl unknown}
      {
        underline=false,
        color=red,
      }
    \knowledgestyle*{intro notion}
      {
        boldface,
        underline=false,
      }
  }

\bool_if:NT \g__mn_index_bool
  {
    \makeindex
  }

\bool_if:NT \g__mn_tabu_bool
  {
    \RequirePackage{multirow}
    \RequirePackage{booktabs}
    \RequirePackage{longtable}
    \RequirePackage{tabu}
    \ProvideExpandableDocumentCommand \Th { O{l} m }
      {
        \multicolumn
          { 1 } % For 1 column...
          { #1 } % ...with column-spec #1...
          { \textbf{#2} } % Typeset #2 in bold.
      }
  }

\bool_if:NT \g__mn_figures_bool
  {
    % figure captions
    \RequirePackage{graphicx}
    \RequirePackage{caption}
    \captionsetup
      {
        format = hang,
        font   = { sf, footnotesize },
        margin = 1in
      }
  }

\bool_if:NT \g__mn_footnotes_bool
  {
    \PassOptionsToPackage{bottom, hang}{footmisc}
    \RequirePackage{footmisc}
    \setlength{\footnotesep}{\baselineskip}
  }

% Document style.
\setlength{\parindent}{0em}
\setlength{\parskip}{1em}

% % This has to be hooked so that it doesn't break the other bools undefined
% % with it first.
\AtEndOfPackage { \cs_undefine:N \mn__legacy_bool_undefine:n }
